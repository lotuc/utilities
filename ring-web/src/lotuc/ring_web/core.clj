(ns lotuc.ring-web.core
  "generated by https://github.com/kit-clj & did some modification.

  [kit.config](https://github.com/kit-clj/kit/blob/master/libs/kit-core/src/kit/config.clj)
  provides
  1. aero readers for 'ig/ref 'ig/refset (delegates to integrant)
  2. integrant system key :system/env

  `lotuc.ring-web.handler` provides
  - `:router/routes`: collect all routes of type `:reitit/routes`
  - `:router/core`: build router with routes
  - `:handler/ring`: build ring handler with router and other options

  `lotuc.ring-web.routes` provides
  - `:reitit.routes/api`: a reified route (derived from `:reitit/routes`)"
  (:require
   [clojure.tools.logging :as log]
   [integrant.core :as ig]
   [aero.core :as aero]
   [kit.config]
   [lotuc.ring-web.handler]
   [lotuc.ring-web.routes]))

(defmethod aero/reader 'env!
  [opts _tag v]
  (let [v (if (instance? clojure.lang.Named v) (name v) v)]
    (or (System/getenv v) (get-in opts [:env v]))))

(defonce system (atom nil))

(defn stop-app []
  (some-> (deref system) (ig/halt!))
  (shutdown-agents))

(defn start-app [system-file given-opts]
  (Thread/setDefaultUncaughtExceptionHandler
   (reify Thread$UncaughtExceptionHandler
     (uncaughtException [_ thread ex]
       (log/error {:what :uncaught-exception
                   :exception ex
                   :where (str "Uncaught exception on" (.getName thread))}))))
  (->> (aero/read-config system-file given-opts)
       (ig/prep)
       (ig/init)
       (reset! system))
  (.addShutdownHook (Runtime/getRuntime) (Thread. stop-app)))
